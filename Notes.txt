season 1 episode 4
You can make 2 modules work together using the require function.
You can export multiple things by wrapping it inside objects
 
There are 2 types of module pattern : CJS and MJS
Common JS Modules known as CJS
  In CJS we use module.exports and require. CJS is by default used by Node.
  CJS is a older way. In CJS when we rquire modules it requires all the modules in a synchronous way(line after line).
  In CJS the code is executed in non strict mode
  In CJS code is executed in synchronous way


ES Modules also known as MJS
  It has different way of importing and exporting modules. Here we use import and export. By default used in React.
  MJS is a newer way.
  In MJS code is executed in strict mode. In strict mode we cannot write variables without using var let const

Episode 5

  41 min -
  Go to NodeJS repository, then go to lib folder, all the utility methods like require,timers etc are there inside lib folder

Episode 6
  Event driven Architecture and asynchronous IO. Javascript is a synchronous and single threaded language
  
  Synchronous vs Asynchronous
  In synchronous we need to wait for one task to complete before moving to the next task. Synchronous tasks blocks the main thread
  In asynchronous we can move to the next task without waiting for the previous task to complete

  Things which take some time to execute are called as asynchronous(example api call, reading a file) and things which take less time to execute are called as synchronous(example multiplication,addition operation)

  28min - How synchronous code is executed
  What is JS engine, what are the components inside JS engine
  JS engine has one call stack. Every code you write is executed in this single call stack
  JS engine also has a memory heap. It stores all the variables and functions
  JS engine also has a garbage collector - It collects the unsused variables , functions

  Whenever you run Javascript code, a global execution context is created

  45 min- Connecting V8 engine to OS is done using libuv
  libuv has many super powers - Async IO is made simple using libuv
  libuv helps V8 engine in executing tasks

  When executing a code, if there are any async tasks such as setTimeouts,api calls etc these are all given to libuv by V8 engine(JS engine) and libuv will execute them

  NodeJS is asynchronous, it performs async tasks using libuv

Episode 8

What happens when our code is executed by V8 engine?
1. Parsing
Lexical Analysis - Code is broken into small tokens
2. Syntax Analysis - tokens are converted into AST (abstract syntax tree)
  https://astexplorer.net/
3. Compilation - AST is converted into machine code
4. Execution - machine code is executed

19 min - There are 2 types of languages. Interpreted and Compiled

Interpreted languages - Code is executed line by line, Fast initial excution
Compiled languages - Code is converted into machine code and then executed,Initially heavy but later fast

Javascript V8 engine has a Interpreter and a Compiler. Compilation method in JS is known as JIT compilation

Episode 9
  What is there inside libuv?
  There are 3 major components - Event loop,Callback queues and Thread pool

  Async tasks are off loaded to libuv and once the task is completed, it is given back to V8 engine.

  Callback function has to wait in the Callback queue until the call stack is empty.Call stack is part of the V8 engine.

  The main task of Event loop is to keep checking the callback queue and the call stack and once the call stack is empty, it will take the callback function from the callback queue and push it into the call stack

  Phases of Event loop are 
    1. Timers - All the callbacks of setTimeout and setInterval are executed here
    2. poll - All the callbacks of I/O are executed here(such as API calls, file reading etc)
    3. check - All the callbacks of setImmediate are executed here
    4. close callbacks - All the callbacks of close events are executed here(socket etc)
    process.nextTick and Promise callbacks

    50 min - Showing examples

    Event loop waits at the poll phase until it gets some api calls,file reading etc to execute


-------------------------------------------------------------------------

Episode 12
Database
It is a organized collection of data. With the help of DBMS we can talk with the Database(like selecting data, fetching data)

Types of Database
  Relational Database - MySql, Postgres
  No Sql - MongoDB
  In memory DB - Redis
  Cloud DB - Amazon RDS

RAM and ROM - RAM is a faster memory but cannot store more amount of data

Types of NoSQL DB are Document DB, Key value DB, Graph DB, Wide column DB, Multimodel DB
MongoDB is Document DB - It stores data in json format. No need of Joins and Data normalization

Data in MongoDB may look like this
  {
    "name":"John",
    "age":"25",
    "city":"New York",
    "hobbies":["Reading","Swimming","Coding"]
  },
  {
    "name":"John",
    "age":"25",
    "city":"New York",
    "hobbies":["Reading","Swimming","Coding"]
  }

Relational DB store data in Table format

Episode 13

Self managed and One is the Compnay manages the Database for us.
We dont need to worry about deploying our Database to the server when we go for production.
We dont need to ensure that it is always up and running etc

I am having a Database , now i am asking MongoDB company to manage the Database for me, so the company will take the cluster and deploy it on some machine
Always go with the M0 plan(It is free)

How do we use our Cluster
	You need to get a connection string, to connect to the database

MongoDB Compass will help you to get access of the Database. It is the UI for the Database

The structure is like Database --> Collection --> Document
    Collection name means Table name
    Just like in Reational DB, we create Tables, we create Document in MongoDB

    39min : How to connect MongoDB with Node application, for that you need a package called mongodb, install it from npm
    Later we will use mongoose package from npm library to connect MongoDB with Node application
    Dont push node_modules to github, create a .gitignore file and mention node_modules to ignore it from pushing

    await keyword because it is returning a promise

    Documentation MongoDB - https://mongodb.github.io/node-mongodb-native/6.16/
    Collection Object link - https://mongodb.github.io/node-mongodb-native/6.16/classes/Collection.html